package lyc.compiler;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

import lyc.compiler.files.IntermediateCodeGenerator;
import lyc.compiler.files.SymbolTableGenerator;

class Parser;

action code {:
  private boolean debug = false;

  private int FactorIndex = 0;
  private int TermIndex = 0;
  private int ExpressionIndex = 0;
  private int ConditionIndex = 0;
  private int ConditionTermIndex = 0;
  private int ConditionConcatIndex = 0;
  private int ComparitionOperatorIndex = 0;
  private int AssignmentIndex = 0;
  private int InputIndex = 0;
  private int OutputIndex = 0;
  private int IterationIndex = 0;
  private int SelectionIndex = 0;
  private int DeclarationIndex = 0;
  private int DeclarationListIndex = 0;
  private int VariableListIndex = 0;
  private int VariableIndex = 0;
  private int TypeIndex = 0;
  private int ElementListIndex = 0;
  private int ElementInTheMiddleIndex = 0;
  private int FibonacciIndex = 0;
  private int SentenceIndex = 0;
  private int ProgramIndex = 0;
  private int StartProgramIndex = 0;
  private int DeclarationBlockIndex = 0;
  private int LeftExpressionIndex = 0;
  private int RightExpressionIndex = 0;
  private int FirstVariableIndex = 0;
  private int VariableCount = 0; 
  private int BranchIndex = 0;
  private int ElementListCount = 0;
  private int MiddleIndex = 0;
  private int FirstElementIndex = 0;
  private int TrueConditionIndex = 0;
  private int FiboValueIndex = 0;
  private SymbolTableGenerator.Type LeftExpressionType = null;
  private SymbolTableGenerator.Type RightExpressionType = null;
  private SymbolTableGenerator.Type ExpressionType = null;
  private SymbolTableGenerator.Type FactorType = null;
  private SymbolTableGenerator.Type TermType = null;

  private String LogicOperator = "";
  private String CompOperator = "";
  private String OppositeCompOperator = "";
  private int ComparatorIndex = 0;
  private int CurrentTriple = 0;
  private int BIIndex = 0;

  private int ConditionCounter = 0;

  private SymbolTableGenerator.Type VariableType = null;

  private List<String> VariableList = new ArrayList<String>();
:};

// Terminals
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal ASSIG;

//Comparison operators
terminal NOT;
terminal GREATER;
terminal LESS;
terminal AND;
terminal OR;

/// Palabras reservadas 
terminal IF;
terminal ELSE;
terminal WHILE;
terminal WRITE;
terminal READ;
terminal INIT;
terminal INTEGERTYPE;
terminal FLOATTYPE;
terminal STRINGTYPE;
terminal ELEMENTINTHEMIDDLE;
terminal FIBONACCI;

//Other symbols
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLYBRACKET;
terminal CLOSE_CURLYBRACKET;
terminal COMMA;
terminal COLON;

/// Identificadores y Constantes
terminal IDENTIFIER;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;

// Non Terminals
non terminal startprogram;
non terminal program;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal elementList;
non terminal condition;
non terminal conditionConcat;
non terminal comparitionOperator;
non terminal declaration;
non terminal declarationList;
non terminal type;
non terminal input;
non terminal output;
non terminal iteration;
non terminal selection;
non terminal conditionTerm;
non terminal variableList;
non terminal variable;
non terminal declarationBlock;
non terminal fibovalue;

// Start Symbol Definition
// Use IntermediateCodeGenerator.java to generate the Intermediate Code using triplets
start with startprogram;

//Base GCI OK
startprogram ::=;
startprogram ::= program;
program ::= sentence {:  if(debug) { System.out.println("Program"); } :};
program ::= program sentence {: if(debug) { System.out.println("Program"); }:};
sentence ::= assignment {: if(debug) { System.out.println("End"); } :};


//Assignment GCI OK
assignment ::= IDENTIFIER:id ASSIG expression   {: if(debug) { System.out.println("Assignment:" + id); } 
                                                    SymbolTableGenerator.validateVariableDeclared(id); //Valido que la variable este declarada
                                                    IntermediateCodeGenerator.addTriple("=", id, "[" + ExpressionIndex + "]"); 

                                                    //Valido que el tipo de la variable sea el mismo que el de la expresion
                                                    SymbolTableGenerator.Type variableType = SymbolTableGenerator.getType(id.toString());
                                                    if(variableType != ExpressionType) {
                                                        System.out.println("Error: Type mismatch in assignment of variable " + id.toString());
                                                        System.exit(1);
                                                    }
                                                :};

assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:constant 
                                                {:  if(debug) { System.out.println("Assignment of string:" + id); } 
                                                    IntermediateCodeGenerator.addTriple("=", id, constant); 

                                                    //Valido que el tipo de la variable sea el mismo que el de la expresion
                                                    SymbolTableGenerator.Type variableType = SymbolTableGenerator.getType(id.toString());

                                                    System.out.println("Error:variableType " + variableType);

                                                    if(variableType != SymbolTableGenerator.Type.CTE_STRING) {
                                                        System.out.println("Error: Type mismatch in assignment of variable " + id.toString());
                                                        System.exit(1);
                                                    }
                                                :};

//Sentences GCI OK
sentence ::= input {: if(debug) { System.out.println("Input"); } :};
sentence ::= output {: if(debug) { System.out.println("Output"); } :};
sentence ::= iteration {: if(debug) { System.out.println("Iteration"); } :};
sentence ::= selection {: if(debug) { System.out.println("Selection"); } :};
sentence ::= declarationBlock {: if(debug) { System.out.println("DeclarationBlock"); } :};

//Iteration GCI OK
iteration ::=       WHILE 
                            {: 
                                if(debug) { System.out.println("Empty iteration"); } 
                                
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount();
                                IntermediateCodeGenerator.stackPush(CurrentTriple);
                            :}
                    OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET program CLOSE_CURLYBRACKET 
                            {: 
                                if(debug) { System.out.println("Empty iteration"); } 
                                
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount() + 1;
                                ComparatorIndex = IntermediateCodeGenerator.stackPop();
                                IntermediateCodeGenerator.updateTriple(ComparatorIndex, "[" + CurrentTriple + "]");

                                IntermediateCodeGenerator.conditionStackPop();

                                int conditionStartIndex = IntermediateCodeGenerator.stackPop();
                                ConditionTermIndex = IntermediateCodeGenerator.addTriple("BI",  "[" + conditionStartIndex + "]" );
                            :};


//Selection GCI OK
selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET program CLOSE_CURLYBRACKET 
                            {: 
                                if(debug) { System.out.println("Selection"); } 
                                
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount();

                                ComparatorIndex = IntermediateCodeGenerator.stackPop();
                                IntermediateCodeGenerator.updateTriple(ComparatorIndex, "[" + CurrentTriple + "]");
                                ConditionCounter--;

                                boolean updateSecondCondition = IntermediateCodeGenerator.conditionStackPop();

                                if(updateSecondCondition) {
                                    ComparatorIndex = IntermediateCodeGenerator.stackPop();
                                    IntermediateCodeGenerator.updateTriple(ComparatorIndex, "[" + CurrentTriple + "]");
                                    ConditionCounter--;
                                }
                            :};

selection ::=   IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET program CLOSE_CURLYBRACKET ELSE OPEN_CURLYBRACKET 
                            {:
                                if(debug) { System.out.println("Selection with empty else and program"); } 
                            
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount();

                                ComparatorIndex = IntermediateCodeGenerator.stackPop();
                                IntermediateCodeGenerator.updateTriple(ComparatorIndex, "[" + CurrentTriple + "]");
                                ConditionCounter--;

                                boolean updateSecondCondition = IntermediateCodeGenerator.conditionStackPop();

                                if(updateSecondCondition) {
                                    ComparatorIndex = IntermediateCodeGenerator.stackPop();
                                    IntermediateCodeGenerator.updateTriple(ComparatorIndex, "[" + CurrentTriple + "]");
                                    ConditionCounter--;
                                }
                            :}

                program CLOSE_CURLYBRACKET
                            {:
                                if(debug) { System.out.println("Selection with empty else and program"); } 

                                // CurrentTriple = IntermediateCodeGenerator.getTripleCount();
                                // ComparatorIndex = IntermediateCodeGenerator.stackPop();
                                // IntermediateCodeGenerator.updateTriple(ComparatorIndex, "[" + CurrentTriple + "]");
                            :};

//Multiple Condition GCI OK
condition ::=   conditionTerm conditionConcat 
                    {:
                        if(LogicOperator == "OR")
                        {
                            IntermediateCodeGenerator.updateTripleOpCode(ComparatorIndex, CompOperator);
                        }
                    :}
                conditionTerm
                    {: 
                        if(debug) { System.out.println("conditionTerm concat conditionTerm"); } 

                        if (LogicOperator == "AND")
                        {
                            IntermediateCodeGenerator.conditionStackPush(true);
                        }
                        else
                        {
                            IntermediateCodeGenerator.conditionStackPush(false);
                            Integer NextTriple = IntermediateCodeGenerator.getTripleCount();

                            int AuxComparatorIndex = IntermediateCodeGenerator.stackPop();

                            ComparatorIndex = IntermediateCodeGenerator.stackPop();

                            IntermediateCodeGenerator.stackPush(AuxComparatorIndex);

                            IntermediateCodeGenerator.updateTriple(ComparatorIndex, "[" + NextTriple.toString() + "]");
                        }
                    :};

//Simple Condition GCI PENDING
condition ::= conditionTerm 
                    {: 
                        if(debug) { System.out.println("conditionTerm"); } 
                        IntermediateCodeGenerator.conditionStackPush(false);
                    :};

conditionTerm ::= expression 
                            {: 
                                LeftExpressionIndex = ExpressionIndex; 
                                LeftExpressionType = ExpressionType;
                            :}
                  comparitionOperator 
                  
                  expression 
                            {:  if(debug) { System.out.println("Condition"); } 

                                //check if the types are the same
                                if(LeftExpressionType != ExpressionType)
                                {
                                    System.out.println("Error: Types are not the same");
                                    System.exit(1);
                                }

                                ConditionTermIndex = IntermediateCodeGenerator.addTriple("CMP",  "[" + LeftExpressionIndex + "]",  "[" + ExpressionIndex + "]" );
                                ComparatorIndex = IntermediateCodeGenerator.addTriple(OppositeCompOperator, "?");
                                IntermediateCodeGenerator.stackPush(ComparatorIndex);
                            :};

conditionTerm ::= NOT expression 
                            {: LeftExpressionIndex = ExpressionIndex; :}
                  
                  comparitionOperator 
                  
                  expression 
                            {: if(debug) { System.out.println("NOT Condition"); } 

                                ConditionTermIndex = IntermediateCodeGenerator.addTriple("CMP",  "[" + LeftExpressionIndex + "]",  "[" + ExpressionIndex + "]" );

                                ComparatorIndex = IntermediateCodeGenerator.addTriple(CompOperator, "?");

                                IntermediateCodeGenerator.stackPush(ComparatorIndex);

                            :};

conditionConcat ::= OR {: if(debug) { System.out.println("||"); } LogicOperator = "OR"; :};
conditionConcat ::= AND {: if(debug) { System.out.println("&&"); } LogicOperator = "AND"; :};

comparitionOperator ::= GREATER {: if(debug) { System.out.println(">"); } CompOperator = "BGT"; OppositeCompOperator = "BLE"; :};
comparitionOperator ::= LESS {: if(debug) { System.out.println("<"); } CompOperator = "BLT"; OppositeCompOperator = "BGE"; :};

//Declaration GCI OK
declarationBlock ::= INIT OPEN_CURLYBRACKET declarationList CLOSE_CURLYBRACKET {: if(debug) { System.out.println("Init"); } :};
declarationList ::= declaration {: if(debug) { System.out.println("Declaration"); } :};
declarationList ::= declarationList declaration {: if(debug) { System.out.println("Declaration"); } :};
declaration ::= variableList COLON type 
                            {: if(debug) { System.out.println("Declaration"); } 

                                SymbolTableGenerator.UpdateVariablesType(VariableList, VariableType);
                                VariableList.clear();
                            :};

variableList ::= variable   {: 
                                if(debug) { System.out.println("Variable"); } 
                            :};
variableList ::= variableList COMMA variable 
                            {: 
                                if(debug) { System.out.println("Variable list"); } 
                            :};

variable::= IDENTIFIER:id 
                            {: 
                                if(debug) { System.out.println("Variable"); } 

                                VariableList.add(id.toString());
                            :};

//Type GCI OK
type ::= INTEGERTYPE {: if(debug) { System.out.println("Int"); } VariableType = SymbolTableGenerator.Type.CTE_INT; :};
type ::= FLOATTYPE {: if(debug) { System.out.println("Float"); } VariableType = SymbolTableGenerator.Type.CTE_FLOAT; :};
type ::= STRINGTYPE {: if(debug) { System.out.println("String"); } VariableType = SymbolTableGenerator.Type.CTE_STRING; :};

//Expressions GCI OK
expression ::= expression PLUS term {: 
                                        if(debug) { System.out.println("+"); } 
                                        ExpressionIndex = IntermediateCodeGenerator.addTriple("+", "[" + ExpressionIndex + "]", "[" +TermIndex + "]"); 

                                        // If expressionType or termType are string, then throw error
                                        if (ExpressionType == SymbolTableGenerator.Type.CTE_STRING || TermType == SymbolTableGenerator.Type.CTE_STRING)
                                        {
                                            System.out.println("Error: Cannot add string to other type");
                                            System.exit(1);
                                        }

                                        // If expressionType or termType are float, then the result is float
                                        if (ExpressionType == SymbolTableGenerator.Type.CTE_FLOAT || TermType == SymbolTableGenerator.Type.CTE_FLOAT)
                                        {
                                            ExpressionType = SymbolTableGenerator.Type.CTE_FLOAT;
                                        }
                                        else
                                        {
                                            ExpressionType = SymbolTableGenerator.Type.CTE_INT;
                                        }
                                    :};

expression ::= expression SUB term  {: 
                                        if(debug) { System.out.println("-"); } 
                                        ExpressionIndex = IntermediateCodeGenerator.addTriple("-", "[" + ExpressionIndex + "]", "[" +TermIndex + "]"); 

                                        // If expressionType or termType are string, then throw error
                                        if (ExpressionType == SymbolTableGenerator.Type.CTE_STRING || TermType == SymbolTableGenerator.Type.CTE_STRING)
                                        {
                                            System.out.println("Error: Cannot subtract strings");
                                            System.exit(1);
                                        }

                                        // If expressionType or termType are float, then the result is float
                                        if (ExpressionType == SymbolTableGenerator.Type.CTE_FLOAT || TermType == SymbolTableGenerator.Type.CTE_FLOAT)
                                        {
                                            ExpressionType = SymbolTableGenerator.Type.CTE_FLOAT;
                                        }
                                        else
                                        {
                                            ExpressionType = SymbolTableGenerator.Type.CTE_INT;
                                        }
                                    :};

expression ::= term                 {: 
                                        if(debug) { System.out.println("Expression = Term"); } 
                                        ExpressionIndex = TermIndex; 
                                        ExpressionType = TermType;
                                    :};
//Terms GCI OK
term ::= term MULT factor           {: 
                                        if(debug) { System.out.println("*"); } 
                                        TermIndex = IntermediateCodeGenerator.addTriple("*", "[" + TermIndex + "]", "[" +FactorIndex + "]"); 

                                        // If termType or factorType are string, then throw error
                                        if (TermType == SymbolTableGenerator.Type.CTE_STRING || FactorType == SymbolTableGenerator.Type.CTE_STRING)
                                        {
                                            System.out.println("Error: Cannot multiply strings");
                                            System.exit(0);
                                        }

                                        // If termType or factorType are float, then the result is float
                                        if (TermType == SymbolTableGenerator.Type.CTE_FLOAT || FactorType == SymbolTableGenerator.Type.CTE_FLOAT)
                                        {
                                            TermType = SymbolTableGenerator.Type.CTE_FLOAT;
                                        }
                                        else
                                        {
                                            TermType = SymbolTableGenerator.Type.CTE_INT;
                                        }
                                    :};

term ::= term DIV factor            {: 
                                        if(debug) { System.out.println("/"); } 
                                        TermIndex = IntermediateCodeGenerator.addTriple("/", "[" + TermIndex + "]", "[" +FactorIndex + "]"); 

                                        // If termType or factorType are string, then throw error
                                        if (TermType == SymbolTableGenerator.Type.CTE_STRING || FactorType == SymbolTableGenerator.Type.CTE_STRING)
                                        {
                                            System.out.println("Error: Cannot divide strings");
                                            System.exit(0);
                                        }
                                        
                                        // If termType or factorType are float, then the result is float
                                        if (TermType == SymbolTableGenerator.Type.CTE_FLOAT || FactorType == SymbolTableGenerator.Type.CTE_FLOAT)
                                        {
                                            TermType = SymbolTableGenerator.Type.CTE_FLOAT;
                                        }
                                        else
                                        {
                                            TermType = SymbolTableGenerator.Type.CTE_INT;
                                        }
                                    :};

term ::= factor                     {: 
                                        if(debug) { System.out.println("Term = factor"); } TermIndex = FactorIndex; 
                                        TermType = FactorType;
                                    :};

//Factor GCI OK
factor ::= OPEN_BRACKET expression CLOSE_BRACKET 
                                    {: if(debug) { System.out.println("Factor = (Expression)"); } 
                                        FactorIndex = ExpressionIndex; 
                                        FactorType = ExpressionType;
                                    :};
factor ::= IDENTIFIER:id  
                                    {: if(debug) { System.out.println("Id: " + id); } 
                                        FactorIndex = IntermediateCodeGenerator.addTriple(id); 
                                        FactorType = SymbolTableGenerator.getType(id.toString());
                                    :};
factor ::= INTEGER_CONSTANT:constant 
                                    {:  if(debug) { System.out.println("Int Constant: " + constant ); } 
                                        FactorIndex = IntermediateCodeGenerator.addTriple(constant); 
                                        FactorType = SymbolTableGenerator.Type.CTE_INT;
                                    :};
factor ::= FLOAT_CONSTANT:constant 
                                    {: if(debug) { System.out.println("Float Constant: " + constant ); } 
                                        FactorIndex = IntermediateCodeGenerator.addTriple(constant); 
                                        FactorType = SymbolTableGenerator.Type.CTE_FLOAT;
                                    :};

//I/O  GCI OK
input ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {: if(debug) { System.out.println("Input"); } IntermediateCodeGenerator.addTriple("read", id); :};
output ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET {: if(debug) { System.out.println("Output"); } IntermediateCodeGenerator.addTriple("write", constant); :};
output ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {: if(debug) { System.out.println("Output"); } IntermediateCodeGenerator.addTriple("write", id); :};

//Temas Especiales
//FIB GCI PENDING
factor ::= FIBONACCI OPEN_BRACKET fibovalue CLOSE_BRACKET 
                                    {: if(debug) { System.out.println("Fibonacci"); } 

                                        //Generate the code for the Fibonacci function in the Intermediate Code
                                        
                                        // int valor, first = 0, second = 1, next, current = 0;
                                        // while ( n > 0 )
                                        // {
                                        //     if ( c <= 1 )
                                        //         next = c;
                                        //     else
                                        //     {
                                        //         next = first + second;
                                        //         first = second;
                                        //         second = next;
                                        //     }
                                        //     n--;
                                        //     printf("%d\n",next);
                                        // }
                                        // result = next;

                                        int fiboPositionIndex = IntermediateCodeGenerator.addTriple("@fiboPosition");
                                        IntermediateCodeGenerator.addTriple("=",  "[" + fiboPositionIndex + "]",  "[" + FiboValueIndex + "]");

                                        // int valor, first = 0, second = 1, next, current = 0;
                                        int fiboFirstIndex = IntermediateCodeGenerator.addTriple("@first");
                                        IntermediateCodeGenerator.addTriple("=",  "[" + fiboFirstIndex + "]", 0);
                                        
                                        int fiboSecondIndex = IntermediateCodeGenerator.addTriple("@second");
                                        IntermediateCodeGenerator.addTriple("=",  "[" + fiboSecondIndex + "]", 1);
                                        
                                        int fiboNextIndex = IntermediateCodeGenerator.addTriple("@next");

                                        int fiboCurrentIndex = IntermediateCodeGenerator.addTriple("@current");
                                        IntermediateCodeGenerator.addTriple("=",  "[" + fiboCurrentIndex + "]", 0);

                                        // while ( n > 0 ) fiboPositionIndex = n
                                        int FiboStartIndex = IntermediateCodeGenerator.addTriple("CMP",  "[" + fiboPositionIndex + "]",  "0" );
                                        //La cantidad de saltos van a ser fijos, por lo tanto podemos hardcodear el valor
                                        IntermediateCodeGenerator.addTriple("BLE",  "[" + (FiboStartIndex + 13) + "]");
                                        
                                        //     if ( c <= 1 )
                                        ComparatorIndex = IntermediateCodeGenerator.addTriple("CMP",  "[" + fiboCurrentIndex + "]",  "1" );
                                        int FiboElseIndex = ComparatorIndex + 2;
                                        IntermediateCodeGenerator.addTriple("BGT",  "[" + FiboElseIndex + "]",  "1" );

                                        //         next = c;
                                        int FiboAuxIndex = IntermediateCodeGenerator.addTriple("=",  "[" + fiboNextIndex + "]", "[" + fiboCurrentIndex + "]");
                                        //La cantidad de saltos van a ser fijos, por lo tanto podemos hardcodear el valor
                                        IntermediateCodeGenerator.addTriple("BI",  "[" + (FiboAuxIndex + 6 ) + "]");

                                        //     else
                                        //         next = first + second;
                                        int FiboAddIndex = IntermediateCodeGenerator.addTriple("+", "[" + fiboFirstIndex + "]", "[" + fiboSecondIndex + "]");
                                        IntermediateCodeGenerator.addTriple("=", "[" + fiboNextIndex + "]", "[" + FiboAddIndex + "]" );

                                        //         first = second;
                                        IntermediateCodeGenerator.addTriple("=", "[" + fiboFirstIndex + "]", "[" + fiboSecondIndex + "]" );


                                        //         second = next;
                                        IntermediateCodeGenerator.addTriple("=", "[" + fiboSecondIndex + "]", "[" + fiboNextIndex + "]" );

                                        //     n--;
                                        int FiboSubIndex = IntermediateCodeGenerator.addTriple("-", "[" + fiboPositionIndex + "]", "1");
                                        IntermediateCodeGenerator.addTriple("=", "[" + fiboPositionIndex + "]", "[" + FiboSubIndex + "]" );

                                        // fin while
                                        IntermediateCodeGenerator.addTriple("BI",  "[" + FiboStartIndex + "]");

                                        FactorIndex = fiboNextIndex;
          
                                    
                                    :};
fibovalue ::= IDENTIFIER:id  {: if(debug) { System.out.println("fibovalue Id: " + id); } 
                                FiboValueIndex = IntermediateCodeGenerator.addTriple(id); 
                                //VER si esta declarado y si el tipo es INT. Despues validar si es mayor a 0
                                SymbolTableGenerator.checkSymbol(id, SymbolTableGenerator.Type.CTE_INT);
                            :};
fibovalue ::= INTEGER_CONSTANT:constant {: if(debug) { System.out.println("fibovalue Int Constant: " + constant ); } 
                                            FiboValueIndex = IntermediateCodeGenerator.addTriple(constant); 
                                            //VALIDAR QUE SEA NATURAL > 0
                                            if(Integer.valueOf((String) constant) <= 0){
                                                System.out.println("Fibonacci: El valor debe ser un numero natural mayor a 0");
                                                System.exit(1);
                                            }
                                        :};


//ElementInTheMiddle GCI OK
factor ::= ELEMENTINTHEMIDDLE OPEN_BRACKET elementList CLOSE_BRACKET 
                                    {: 
                                        if(debug) { System.out.println("ElementInTheMiddle"); } 
                                        //Find the index of the ElementList in the middle
                                        int MiddleIndex = FirstElementIndex + ElementListCount / 2;
                                        FactorIndex = MiddleIndex;

                                    :};
elementList ::= elementList COMMA factor COMMA factor 
                                    {: 
                                        if(debug) { System.out.println("Element list - Odd elements"); } 

                                        ElementListCount = ElementListCount + 2;
                                    :}; 
elementList ::= factor {: 
                            if(debug) { System.out.println("Element list - Only one"); } 
                            ElementListIndex = FactorIndex; 
                            FirstElementIndex = FactorIndex;
                            ElementListCount = 1;

                        :}; 
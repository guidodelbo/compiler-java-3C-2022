package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.IntermediateCodeGenerator;

class Parser;

action code {:
  private boolean debug = true;

  private int FactorIndex = 0;
  private int TermIndex = 0;
  private int ExpressionIndex = 0;
  private int ConditionIndex = 0;
  private int ConditionTermIndex = 0;
  private int ConditionConcatIndex = 0;
  private int ComparitionOperatorIndex = 0;
  private int AssignmentIndex = 0;
  private int InputIndex = 0;
  private int OutputIndex = 0;
  private int IterationIndex = 0;
  private int SelectionIndex = 0;
  private int DeclarationIndex = 0;
  private int DeclarationListIndex = 0;
  private int VariableListIndex = 0;
  private int VariableIndex = 0;
  private int TypeIndex = 0;
  private int ElementListIndex = 0;
  private int ElementInTheMiddleIndex = 0;
  private int FibonacciIndex = 0;
  private int SentenceIndex = 0;
  private int ProgramIndex = 0;
  private int StartProgramIndex = 0;
  private int DeclarationBlockIndex = 0;
  private int LeftExpressionIndex = 0;
  private int RightExpressionIndex = 0;

  private String LogicOperator = "";
  private String CompOperator = "";
  private String OppositeCompOperator = "";
  private int ComparetorIndex = 0;
  private int CurrentTriple = 0;

:};

// Terminals
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal ASSIG;

//Comparison operators
terminal NOT;
terminal GREATER;
terminal LESS;
terminal AND;
terminal OR;

/// Palabras reservadas 
terminal IF;
terminal ELSE;
terminal WHILE;
terminal WRITE;
terminal READ;
terminal INIT;
terminal INTEGERTYPE;
terminal FLOATTYPE;
terminal STRINGTYPE;
terminal ELEMENTINTHEMIDDLE;
terminal FIBONACCI;

//Other symbols
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLYBRACKET;
terminal CLOSE_CURLYBRACKET;
terminal COMMA;
terminal COLON;

/// Identificadores y Constantes
terminal IDENTIFIER;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;

// Non Terminals
non terminal startprogram;
non terminal program;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal elementList;
non terminal condition;
non terminal conditionConcat;
non terminal comparitionOperator;
non terminal declaration;
non terminal declarationList;
non terminal type;
non terminal input;
non terminal output;
non terminal iteration;
non terminal selection;
non terminal conditionTerm;
non terminal variableList;
non terminal variable;
non terminal declarationBlock;

// Start Symbol Definition
// Use IntermediateCodeGenerator.java to generate the Intermediate Code using triplets
start with startprogram;

//Base GCI PENDING
startprogram ::=;
startprogram ::= program;
program ::= sentence {:  if(debug) { System.out.println("Program"); } :};
program ::= program sentence {: if(debug) { System.out.println("Program"); }:};
sentence ::= assignment {: if(debug) { System.out.println("End"); } :};


//Assignment GCI OK
assignment ::= IDENTIFIER:id ASSIG expression {: if(debug) { System.out.println("Assignment:" + id); } IntermediateCodeGenerator.addTriple("=", id, "[" + ExpressionIndex + "]"); :};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:constant {: if(debug) { System.out.println("Assignment of string:" + id); } IntermediateCodeGenerator.addTriple("=", id, constant); :};

//Sentences GCI PENDING
sentence ::= input {: if(debug) { System.out.println("Input"); } :};
sentence ::= output {: if(debug) { System.out.println("Output"); } :};
sentence ::= iteration {: if(debug) { System.out.println("Iteration"); } :};
sentence ::= selection {: if(debug) { System.out.println("Selection"); } :};
sentence ::= declarationBlock {: if(debug) { System.out.println("DeclarationBlock"); } :};

//Iteration  GCI PENDING
iteration ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET CLOSE_CURLYBRACKET {: if(debug) { System.out.println("Empty iteration"); } :};
iteration ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET program CLOSE_CURLYBRACKET {: if(debug) { System.out.println("Iteration"); } :};

//Selection GCI OK
selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET CLOSE_CURLYBRACKET 
                            {: if(debug) { System.out.println("Empty selection"); } 
                            
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount();

                                IntermediateCodeGenerator.updateTriple(ComparetorIndex, "[" + CurrentTriple + "]");
                            :};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET program CLOSE_CURLYBRACKET 
                            {: 
                                if(debug) { System.out.println("Selection"); } 
                                
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount();

                                IntermediateCodeGenerator.updateTriple(ComparetorIndex, "[" + CurrentTriple + "]");
                            :};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET program CLOSE_CURLYBRACKET ELSE OPEN_CURLYBRACKET CLOSE_CURLYBRACKET 
                            {:  
                                if(debug) { System.out.println("Selection with empty else"); } 
                            
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount();

                                IntermediateCodeGenerator.updateTriple(ComparetorIndex, "[" + CurrentTriple + "]");
                            :};

selection ::=   IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLYBRACKET program CLOSE_CURLYBRACKET ELSE OPEN_CURLYBRACKET 
                            {:  
                                if(debug) { System.out.println("Selection with else"); } 
                            
                                CurrentTriple = IntermediateCodeGenerator.getTripleCount();

                                IntermediateCodeGenerator.updateTriple(ComparetorIndex, "[" + CurrentTriple + "]");
                            :}
                            
                            program CLOSE_CURLYBRACKET;

condition ::= conditionTerm conditionConcat conditionTerm {: if(debug) { System.out.println("conditionTerm concat conditionTerm"); } :};
condition ::= conditionTerm {: if(debug) { System.out.println("conditionTerm"); } :};

conditionTerm ::= expression 
                            {: LeftExpressionIndex = ExpressionIndex; :}
                  comparitionOperator 
                  
                  expression 
                            {:  if(debug) { System.out.println("Condition"); } 
                              
                                ConditionTermIndex = IntermediateCodeGenerator.addTriple("CMP",  "[" + LeftExpressionIndex + "]",  "[" + ExpressionIndex + "]" );

                                ComparetorIndex = IntermediateCodeGenerator.addTriple(OppositeCompOperator, "?");
                            :};

conditionTerm ::= NOT expression 
                            {: LeftExpressionIndex = ExpressionIndex; :}
                  
                  comparitionOperator 
                  
                  expression 
                            {: if(debug) { System.out.println("Condition"); } 

                                ConditionTermIndex = IntermediateCodeGenerator.addTriple("CMP",  "[" + LeftExpressionIndex + "]",  "[" + ExpressionIndex + "]" );

                                IntermediateCodeGenerator.addTriple(CompOperator, "?");
                            :};

conditionConcat ::= OR {: if(debug) { System.out.println("||"); } LogicOperator = "OR"; :};
conditionConcat ::= AND {: if(debug) { System.out.println("&&"); } LogicOperator = "AND"; :};

comparitionOperator ::= GREATER {: if(debug) { System.out.println(">"); } CompOperator = "BGT"; OppositeCompOperator = "BLE"; :};
comparitionOperator ::= LESS {: if(debug) { System.out.println("<"); } CompOperator = "BLT"; OppositeCompOperator = "BGE"; :};

//Declaration GCI PENDING
declarationBlock ::= INIT OPEN_CURLYBRACKET declarationList CLOSE_CURLYBRACKET {: if(debug) { System.out.println("Init"); } :};
declarationList ::= declaration {: if(debug) { System.out.println("Declaration"); } :};
declarationList ::= declarationList declaration {: if(debug) { System.out.println("Declaration"); } :};
declaration ::= variableList COLON type {: if(debug) { System.out.println("Declaration"); } :};
variableList ::= variable {: if(debug) { System.out.println("Declaration list"); } :};
variableList ::= variableList COMMA variable {: if(debug) { System.out.println("Declaration list"); } :};
variable::= IDENTIFIER {: if(debug) { System.out.println("Variable"); } :};
type ::= INTEGERTYPE {: if(debug) { System.out.println("Int"); } :};
type ::= FLOATTYPE {: if(debug) { System.out.println("Float"); } :};
type ::= STRINGTYPE {: if(debug) { System.out.println("String"); } :};

//Expressions GCI OK
expression ::= expression PLUS term {: if(debug) { System.out.println("+"); } ExpressionIndex = IntermediateCodeGenerator.addTriple("+", "[" + ExpressionIndex + "]", "[" +TermIndex + "]"); :};
expression ::= expression SUB term {: if(debug) { System.out.println("-"); } ExpressionIndex = IntermediateCodeGenerator.addTriple("-", "[" + ExpressionIndex + "]", "[" +TermIndex + "]"); :};
expression ::= term {: if(debug) { System.out.println("Expression = Term"); } ExpressionIndex = TermIndex; :};

//Terms GCI OK
term ::= term MULT factor {: if(debug) { System.out.println("*"); } TermIndex = IntermediateCodeGenerator.addTriple("*", "[" + TermIndex + "]", "[" +FactorIndex + "]"); :};
term ::= term DIV factor {: if(debug) { System.out.println("/"); } TermIndex = IntermediateCodeGenerator.addTriple("/", "[" + TermIndex + "]", "[" +FactorIndex + "]"); :};
term ::= factor {: if(debug) { System.out.println("Term = factor"); } TermIndex = FactorIndex; :};

//Factor GCI OK
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: if(debug) { System.out.println("Factor = (Expression)"); } FactorIndex = ExpressionIndex; :};
factor ::= IDENTIFIER:id  {: if(debug) { System.out.println("Id: " + id); } FactorIndex = IntermediateCodeGenerator.addTriple(id); :};
factor ::= INTEGER_CONSTANT:constant {: if(debug) { System.out.println("Int Constant: " + constant ); } FactorIndex = IntermediateCodeGenerator.addTriple(constant); :};
factor ::= FLOAT_CONSTANT:constant {: if(debug) { System.out.println("Float Constant: " + constant ); } FactorIndex = IntermediateCodeGenerator.addTriple(constant); :};

//I/O  GCI OK
input ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {: if(debug) { System.out.println("Input"); } IntermediateCodeGenerator.addTriple("read", id); :};
output ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET {: if(debug) { System.out.println("Output"); } IntermediateCodeGenerator.addTriple("write", constant); :};
output ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {: if(debug) { System.out.println("Output"); } IntermediateCodeGenerator.addTriple("write", id); :};

//Temas Especiales
//FIB GCI PENDING
factor ::= FIBONACCI OPEN_BRACKET factor CLOSE_BRACKET {: if(debug) { System.out.println("Fibonacci"); } :};
//ElementInTheMiddle GCI PENDING
factor ::= ELEMENTINTHEMIDDLE OPEN_BRACKET elementList CLOSE_BRACKET {: if(debug) { System.out.println("ElementInTheMiddle"); } :};
elementList ::= elementList COMMA factor COMMA factor {: if(debug) { System.out.println("Element list - Odd elements"); } :}; 
elementList ::= factor {: if(debug) { System.out.println("Element list - Only one"); } :}; 
